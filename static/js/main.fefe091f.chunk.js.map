{"version":3,"sources":["CryptoList.js","Crypto.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","react_default","a","createElement","this","props","rates","map","rate","key","currency","className","last","symbol","Component","Crypto","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","axios","get","then","response","data","oldData","state","currentRates","keys","forEach","newCurrency","oldCurrency","find","cur","undefined","push","setState","console","log","catch","error","onFilter","event","value","target","length","trim","toUpperCase","filter","includes","inputValue","_this2","setInterval","type","onChange","src_CryptoList","App","src_Crypto","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAkBeA,mLAbP,OACIC,EAAAC,EAAAC,cAAA,UACCC,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OACtBP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKE,UAAd,iBACgBT,EAAAC,EAAAC,cAAA,QAAMQ,UAAWH,EAAKG,WAAYH,EAAKI,KAAvC,KAChBX,EAAAC,EAAAC,cAAA,kBAAUK,EAAKE,SAAf,QAAgCF,EAAKK,OAArC,gBARSC,aCsHTC,cAlHZ,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KAoBRiB,QAAU,WACRC,IAAMC,IAAI,qCACXC,KAAK,SAAAC,GACF,IAAIC,EAAOD,EAASC,KACdC,EAAUZ,EAAKa,MAAMC,aACvBA,EAAe,GAKjBb,OAAOc,KAAKJ,GAAMK,QAAQ,SAAAtB,GACxB,IAAIuB,EAAc,CACdvB,SAAUA,EACVE,KAAMe,EAAKjB,GAAUE,KACrBC,OAAQc,EAAKjB,GAAUG,OACvBF,UAAW,QAaXuB,EAAcN,EAAQO,KAAK,SAAAC,GAAG,OAAIA,EAAI1B,WAAauB,EAAYvB,gBACjD2B,IAAhBH,IACID,EAAYrB,KAAOsB,EAAYtB,KAC/BqB,EAAYtB,UAAY,QACjBsB,EAAYrB,KAAOsB,EAAYtB,OACtCqB,EAAYtB,UAAY,QAG9BmB,EAAaQ,KAAKL,KAMtBjB,EAAKuB,SAAU,CAAET,aAAcA,IAEjCU,QAAQC,IAAId,GACZV,OAAOc,KAAKJ,KAEbe,MAAM,SAAUC,GAEfH,QAAQC,IAAIE,MAtEG3B,EA6EjB4B,SAAW,SAACC,GACV,IAAIC,EAAQD,EAAME,OAAOD,MAEJ,IAAjBA,EAAME,QACNhC,EAAKM,UAGTwB,EAAQA,EAAMG,OAAOC,cACrB,IAAIpB,EAAed,EAAKa,MAAMC,aAE9BA,EAAeA,EAAaqB,OAAO,SAAA3C,GAE/B,OADAgC,QAAQC,IAAIK,GACLtC,EAAKE,SAAS0C,SAASN,KAGlC9B,EAAKuB,SAAS,CAACc,WAAYP,EAAOhB,aAAcA,KAxFhDd,EAAKa,MAAQ,CACTC,aAAc,GACduB,WAAY,IANDrC,mFASC,IAAAsC,EAAAlD,KAChBA,KAAKkB,UAELiC,YAAa,WACqB,KAA1BD,EAAKzB,MAAMwB,YACXC,EAAKhC,WAIV,sCAmFH,OACIrB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACXV,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOqD,KAAK,OAAOV,MAAS1C,KAAKyB,MAAMwB,WAAYI,SAAUrD,KAAKwC,WAClE3C,EAAAC,EAAAC,cAACuD,EAAD,CAAYpD,MAAOF,KAAKyB,MAAMC,uBA1GzBhB,mBCWN6C,MAZf,WACE,OACE1D,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,eAIlBV,EAAAC,EAAAC,cAACyD,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.fefe091f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass CryptoList extends Component {\n    render() {\n   \n        return (\n            <ul>\n            {this.props.rates.map(rate => \n                <li key={rate.currency}>\n                Last rate:&nbsp;<span className={rate.className}>{rate.last} </span>\n                <strong> {rate.currency}&nbsp;({rate.symbol})</strong>\n                </li>\n            )}\n            </ul>\n        )\n    }\n}\n\nexport default CryptoList;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport CryptoList from './CryptoList';\n\n\nclass Crypto extends Component {\n    constructor(props) {\n        super(props);\n\n        //this state pozwala aktualizowac pole przekazywane po kluczu\n        this.state = {\n            currentRates: [],\n            inputValue: \"\"\n        }\n    }\n    componentDidMount() {\n        this.getData();\n\n        setInterval (() => {\n            if (this.state.inputValue === '') {\n                this.getData ();\n\n            }\n            \n        }, 5000);\n      }\n    \n      getData = () => {\n        axios.get('https://blockchain.info/pl/ticker')\n      .then(response =>  {\n          let data = response.data;\n          const oldData = this.state.currentRates;\n          let currentRates = [];\n\n            //state - stare dane z poprzedniej iteracji\n            //response - nowe dane\n\n            Object.keys(data).forEach(currency => {\n              let newCurrency = {\n                  currency: currency,\n                  last: data[currency].last,\n                  symbol: data[currency].symbol,\n                  className: 'blue'\n              };\n            \n            //const oldCurrency = oldData.find(cur => cur.currency=== newCurrency.currency); - analogiczny zapis ponizej wyszukuje elementy\n            //   const oldCurrency = oldData.find(cur =>  {\n            //       if (cur.currency === newCurrency.currency) {\n            //           return true;\n            //       } else {\n            //           return false;\n            //       }\n            //   });\n\n              \n            const oldCurrency = oldData.find(cur => cur.currency === newCurrency.currency);\n            if (oldCurrency !== undefined) {\n                if (newCurrency.last > oldCurrency.last) {\n                    newCurrency.className = 'green';\n                } else if (newCurrency.last < oldCurrency.last) {\n                    newCurrency.className = 'red';\n                } \n            }\n              currentRates.push(newCurrency)\n              \n            }\n            \n            )\n            \n          this.setState ({ currentRates: currentRates});\n        // handle success\n        console.log(data);\n        Object.keys(data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n\n      }\n    \n\n      onFilter = (event) => {\n        let value = event.target.value;\n\n        if (value.length === 0) {\n            this.getData();\n        }\n\n        value = value.trim().toUpperCase();\n        let currentRates = this.state.currentRates;\n\n        currentRates = currentRates.filter(rate => {\n            console.log(value)\n            return rate.currency.includes(value);\n        })\n\n        this.setState({inputValue: value, currentRates: currentRates}); //jezeli klucz obiektu jest rowny wartosci mozemy dac currentRates zamiast \"currentRates: currentRates\"\n\n        \n\n        //console.log(value)\n      }\n\n    \n    render() {\n        return (\n            <div className=\"crypto\">\n                <h1>Crypto list</h1>\n                <input type=\"text\" value = {this.state.inputValue} onChange={this.onFilter}/>\n                <CryptoList rates={this.state.currentRates}/>\n            </div>\n        )\n    }\n\n\n}\n\n\n export default Crypto;\n \n ","import React from 'react';\nimport Crypto from \"./Crypto\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n    \n      </header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}